<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Tuesday, May 02, 2023, 9:18 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "Trans_Helper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Trans_TransHelper"
   author="Kelaire"
   id="b599a71861e9cf7341c0bec2"
   language="Lua"
   purpose="Make the Trans epic easier to lead and run."
   save_state="y"
   date_written="2023-05-02 21:17:15"
   requires="5.07"
   version="1.1"
   >
<description trim="n">
<![CDATA[
Trans Helper

ts help                 - shows this note
ts <enable>/<disable>   - turns on/off the plugin
ts leader               - turns on/off leader specific stuff
ts check                - check if enable/leader is on/off
ts group                - create the trans epic group
ts round<1-4>           - send phase instructions to group
ts blades               - send blade holders to group
ts conduits             - report conduit # to group
ts scan                 - scan from center room in phase 1
ts maze                 - report paths from map room in phase 2
ts tid                  - report target health in maze in phase 2
ts split <p1> <p2> <p3> - designate lane leaders for phase 3
ts ecn                  - show current gt command for callouts
ts ecn <command>        - change the default gt command for callouts
ts callout <text>       - send custom callout to group

]]>
</description>

</plugin>

<aliases>
  <alias
   script="OnHelp"
   match="Trans_Helper:help"
   enabled="n"
  >
  </alias>
  <alias
   match="ts conduits"
   enabled="y"
   sequence="100"
   keep_evaluating="n"
   script="sayConduits"
  >
  </alias>
  <alias
   match="ts callout *"
   enabled="y"
   sequence="100"
   keep_evaluating="n"
   script="alias_callout"
  >
  </alias>
  <alias
   match="^ts help$"
   enabled="y"
   regexp="y"
   sequence="100"
   keep_evaluating="n"
   script="OnHelp"
  >
  </alias>
  <alias
   match="^ts debug$"
   enabled="y"
   regexp="y"
   sequence="100"
   keep_evaluating="n"
   script="set_debug"
  >
  </alias>
  <alias
   match="^ts leader$"
   enabled="y"
   regexp="y"
   script="set_leader"
   sequence="100"
  >
  </alias>
  <alias
   match="^ts (?<endis>enable|disable)$"
   enabled="y"
   regexp="y"
   script="enableDisable"
   sequence="100"
  >
  </alias>
  <alias
   match="^ts check$"
   enabled="y"
   regexp="y"
   script="isEnabled"
   sequence="100"
  >
  </alias>
  <alias
   match="^ts ecn (?<echanname>.*)$"
   enabled="y"
   regexp="y"
   script="setAliasName"
   sequence="100"
  >
  </alias>
  <alias
   match="^ts ecn$"
   enabled="y"
   regexp="y"
   script="showAliasName"
   sequence="101"
  >
  </alias>
  <alias
   match="ts round4"
   enabled="y"
   sequence="100"
   send_to="10"
  >
  <send>
ts callout Part 4 - DO NOT MOVE UNTIL TOLD at the very beginning.
ts callout For this part you will be focusing on killing Aion.  He will be in the center of the map.  There are going to be "orbs" on the map that look similar to the nexus from part one.  The red (!) hurts your health, and the blue (!) hurts your mana and moves.  Avoid these if you can.
ts callout During this part Aion has several mobprogs that fire.  First is inversion.  When he is inverted DO NOT ATTACK.  All damage will be healed back and then some.  You can heal him during this part and do damage to him.
ts callout The next mobprog is to spawn waves of enemies.  Troopers and Wisps will spawn a lot around the edge of the map, some people will need to split off of Aion to kill these. but Aion needs to remain engaged or he will heal.  Archangels and Gladiators are big mobs he spawns that can be slayed or assassinated.
ts callout He also triggers minigames.  Angelfire, Rat Maze, and Find the Rune.  You're going to die.  It's inevitable.  These takes some practice to master.
ts callout Around the edge you can go up to the ramparts.  In each of the corners is a nexus.  Stand in these rooms and you will get massive healing (HP, MP, and MV).  Void tendrils spawn up here as well and can only be killed by void blades.
  </send>
  </alias>
  <alias
   match="ts round3"
   enabled="y"
   sequence="100"
   send_to="10"
  >
  <send>
ts callout Part 3 - For this part it is a lane defense.  Basically we split into three lanes, and move at the same time killing the mobs in each room. The leader will call out lane leaders and directions from center to move.  Split up and follow the lane leaders.
ts callout One person runs the "controls" seeing the map and calling out when to move, and doing some various helpful spell-like things.
ts callout One person runs the "pylon" pushing it behind Lane B and firing it to assist (one room behind, firing into the room ahead).
ts callout If we did not kill the Lurker in part two, we will also need a "Blade Squad".  If you have a void blade, you will follow the leader IF a blade group is needed.
ts callout Follow the controllers instructions, letting the leader move you through each room.  Retreat to the south if you need to heal.
  </send>
  </alias>
  <alias
   match="^ts split (.*?) (.*?) (.*?)$"
   enabled="y"
   regexp="y"
   sequence="100"
  >
  <send>
gt @x232[@CLane A@x232] @M%1 @W| @x232[@CLane B@x232] @M%2 @W| @x232[@CLane C@x232] @M%3$C
gt @CLane A @Yto @GW @W| @CLane B @Yto @GN @W| @CLane C @Yto @GE$C
  </send>
  </alias>
  <alias
   match="ts group"
   enabled="y"
   sequence="100"
   send_to="12"
  >
  <send>
Execute("group create @x090T@x127r@x133a@x176n@x182s@x225c@x015e@x153n@x117d@x075e@x033n@x025c@x024e")
Execute("ts enable")
set_leader(true)
Execute("ts check")
Execute("wait1,iauto off")
</send>
  </alias>
  <alias
   match="ts round2"
   enabled="y"
   sequence="100"
   send_to="10"
  >
  <send>
ts callout Part 2 - This is like a mixture of Hej and Durth from Titan Epic.  There will be 4 Gaurdians today.  The objective is to kill all four at the same time.  At various HP levels, they will spawn waves of Troopers.  Best bet with the troopers is to blind them, and kill them one at a time, if possible.  
ts callout Of note in this area, there is a green ! which is also a nexus.  Someone will be chasing that, as that will allow us to hunt, as well as to see the map in the special transcend room
ts callout To get to the special transcend room, you can type transcend from any room and then go up, assuming the rift gets unlocked.  From this room you can type "map" to see the entire map.  There will be rooms marked with ^, &gt;, &lt;, and v which will indicate "exits" from the transcend room you are in.  There will be red &gt;!&lt; or ! indicating where the guardians are.
ts callout Void tendrils will spawn in this area, they are only killable by void blades, which are randomly assigned at the beginning.  these mobs can also be tamed.  If you get assigned a void blade, wear it in your dual wield slot.
ts callout Also - DO NOT STAND STILL for too long, or you will be sent to meet your doom with the AFK boss.
  </send>
  </alias>
  <alias
   match="ts blades"
   enabled="y"
   sequence="100"
   keep_evaluating="n"
   script="sayBlades"
  >
  </alias>
  <alias
   match="^ts round1$"
   sequence="100"
   enabled="y"
   regexp="y"
   send_to="10"
  >
  <send>
ts callout Part 1 - This part is basically just killing off the mobs before they get to the center.  The main concentration will be on the warriors, as they are easy to kill.
ts callout There are three additional special mobs - Seraphim Scouts (These steal conduits and need webbed), Colossal Cherubs (Big tanky mobs), and Angelic Executioners (Tanky and Steal conduits)
ts callout There is a nexus that spawns, which you can find and type "channel" for a full restore.
ts callout Tendrils of the dark (3 sets) spawn around the outside and rotate clockwise (3 out from center).  Avoid these, they hurt...a lot)
ts callout Do NOT stay in the center, we only need a small amount of people in the center (4-5) to charge the conduit.  Pay attention to mobs that are called out.</send>
  </alias>
  <alias
	match="^ts scan$"
	sequence="100"
	script="transScanStart"
	enabled="y" 
	regexp="y" 
  >
  </alias>
  <alias
	match="^ts maze$"
	sequence="100"
	script="report_maze_cmd"
	enabled="y" 
	regexp="y" 
  >
  </alias>
  <alias
	match="^ts test maze$"
	sequence="100"
	script="echo_test_maze"
	enabled="y" 
	regexp="y" 
  >
  </alias>
  <alias
	match="^ts print maze$"
	sequence="100"
	script="tprint_maze"
	enabled="y" 
	regexp="y" 
  >
  </alias>
  <alias
	match="^ts tid$"
	sequence="100"
	script="report_tid"
	enabled="y"
	regexp="y"
  >
  </alias>
</aliases>

<triggers>
  <trigger
   enabled="n"
   name="meteors_start"
   match="^Aion launches himself to the sky\, as flaming meteors begin to materialise and rain death from above\!$"
   regexp="y"
   sequence="100"
   script="set_minigame"
   group="trans0"
  >
  </trigger>
  <trigger
   enabled="n"
   name="ratmaze_start"
   match="^\|XXX XXX  \.  \(\#\)  \.  XXX XXX\|$"
   regexp="y"
   sequence="100"
   script="set_minigame"
   group="trans0"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^\| \.   \.   \.  \(\#\)  \.   \.   \. \|$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>ts callout Ratmaze starting!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^     Intricate runes cover the area, the centre of which a large \'10\' is inscribed\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   group="trans_leader"
  >
  <send>
if not white_rune then
	script_callout("Find the @WWhite Rune@C!")
	white_rune = true
	DoAfterSpecial(5, "white_rune = false", 12)
else
	DebugNote("white_rune was true, skipping callout.")
end
</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Aion\'s aura of inversion dissipates\.$"
   regexp="y"
   send_to="12"
   sequence="98"
   keep_evaluating="n"
   group="trans_leader"
  >
  <send>
script_callout("inversion has ended!")
if inversion_time then
	NoteHr()
	Note("It was " .. tostring(os.time() - inversion_time) .. " seconds of inversion.")
	inversion_time = os.time()
	NoteHr()
else
	NoteHr()
	Note("No beginning time was recorded for the inversion.")
	NoteHr()
end
</send>
  </trigger>
  <trigger
   enabled="n"
   match="^(.*) drops a Shimmering Conduit\.$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>ts callout %1 has @Greturned@C a conduit!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^(.*) wrenches a Shimmering Conduit from the Ragnarok Construct\!$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   name="trans_leader_onoff"
   send_to="10"
  >
  <send>ts callout %1 has @Rstolen@C a conduit!
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^A Titan Engineer exclaims \'The Ragnarok Construct is ([0-9]*) per cent charged\!\'"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout the construct is %1%% charged.
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^A Titan Engineer says \'Located a missing conduit on (?<WhoHas>.*)\, who is (?<Located>.*)\.\'"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout @W%1 @Chas a conduit and is located @W%2@C. Please return this!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^You destroy a dimensional fold\, tearing a rift in space\.$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Void Rift Open
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^A fiery rift is torn open\.$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Rift has been Opened!
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^(?:\(\w+\))*\s?Time and space seem to distort and converge on a singular point of power\.$"
   regexp="y"
   sequence="100"
   group="trans0"
   name="trans0_onoff"
  >
  <send>channel</send>
  </trigger>
  <trigger
   match="^\s*\(\s?([1-9]+)\) (?:\(\w+\))*\s?A Shimmering Conduit channels energies\.$"
   regexp="y"
   enabled="n"
   sequence="100"
   group="trans_leader_conditional"
   name="trans_leader_conditional_onoff"
   send_to="12"
  >
  <send>
if string.find("%0", "%(%s?%d+%)") then
	script_callout("There are %1 conduits present.")
	EnableTriggerGroup("trans_leader_conditional", false)
	DebugNote("Disabled trans_leader_conditional trigger group.")
else
	script_callout("There is 1 conduit present.")
	EnableTriggerGroup("trans_leader_conditional", false)
	DebugNote("Disabled trans_leader_conditional trigger group.")
end
  </send>
  </trigger>
  <trigger
   match="^Captain of the Assault says \'(?<Players>.*) I sense that your souls resonate with these sacred items\, and give them to you\.\'$"
   regexp="y"
   sequence="100"
   enabled="n"
   script="bladers"
   group="trans_leader"
  >
  <send>
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault gives Raging Chaos to (\w+)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
   group="trans_leader"
  >
  <send>
script_callout("@x208R@x196a@x160g@x124i@x088n@x094g @x100C@x106h@x112a@x118o@x120s @Cgiven to: @W%1@C.")
  </send>
  </trigger>
  <trigger
   match="^\s+An intricate rune looks different from the others seen thus far\!$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   keep_evaluating="y"
   send_to="12"
  >
  <send>script_callout("@Wwhite rune@C, hunt me!")</send>
  </trigger>
  <trigger
   enabled="n"
   group="trans0"
   keep_evaluating="y"
   match="^\s+An intricate rune looks different from the others seen thus far\!$"
   regexp="y"
   send_to="12"
   sequence="99"
  >
  <send>if true then PlaySound(0, "claninfo.wav") end
ColourNote("white", "green", "Safe room found!")</send>
  </trigger>
  <trigger
   match="^Captain of the Assault gives Aegis Vitalis to (.*)\.$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   send_to="12"
  >
  <send>script_callout("@YAegis Vitalis @Cgiven to: @W%1@C.")
  </send>
  </trigger>
  <trigger
   match="^\s+An Archangel of Wrath comes\.\s+$"
   regexp="y"
   sequence="98"
   enabled="n"
   group="trans_leader"
   send_to="10"
   keep_evaluating="n"
  >
  <send>ts callout @Wan Archangel @Chas spawned! Please slay or assassinate.
  </send>
  </trigger>
  <trigger
   match="^The cataclysmic explosion rips through Aion\'s divine aura\, rendering him vulnerable\!$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Aion is now @Gvulnerable@C!
  </send>
  </trigger>
  <trigger
   match="^You see waves of lethal angel fire rapidly approaching from the \w+ and \w+\!$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Angelfire starting!
  </send>
  </trigger>
  <trigger
   match="^The waves of angel fire have passed\!$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Angelfire over!
  </send>
  </trigger>
  <trigger
   match="^Aion lands amongst the smoking craters\!$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Meteors over!
  </send>
  </trigger>
  <trigger
   match="^The chaotic energies dissipate\!$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Minigame over!
  </send>
  </trigger>
  <trigger
   match="^\s+Aion summons a swarm of angelic troopers\!$"
   regexp="y"
   sequence="98"
   enabled="n"
   group="trans_leader"
   send_to="10"
   keep_evaluating="n"
  >
  <send>ts callout @WTroopers @Chave spawned!
  </send>
  </trigger>
  <trigger
   match="^\s+Aion summons his Gladiators to the fray\!$"
   regexp="y"
   sequence="98"
   enabled="n"
   group="trans_leader"
   send_to="10"
   keep_evaluating="n"
  >
  <send>ts callout @WGladiators @Chave spawned!
  </send>
  </trigger>
  <trigger
   match="^The realm shudders\, as Aion is felled by (.*)\!$"
   regexp="y"
   sequence="100"
   enabled="n"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout @W%1@C has landed the killing blow on Aion!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^A psychic wave filled with benevolence triggered by (.*) ripples by\, apparently changing minds\.$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout %1 has used a Shard of @GBenevolence@C!
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^A psychic wave filled with malevolence triggered by (.*) ripples by\, apparently changing minds\.$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout %1 has used a Shard of @RHate@C!
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault says \'We will begin immediately\.\'$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Round One - Starting!
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault exclaims \'Fend them off\!\'$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Round One - Mobs spawned!
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^A Titan Engineer exclaims \'Captain\! The Ragnarok Construct is fully operational\!\'$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Round One - Complete</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Before you is the Elder God of Time\, Aion\.$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout DO NOT MOVE!!
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault says \'They must be nearby\. Seek them out\, and eliminate their intervention\.\'$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Round Two - Start!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^The Captain of the Assault yells \'The Guardians have all been eliminated\!\'$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Round Two - Complete!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault says \'I sense a great Nexus of Power has appeared here\.\'$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="10"
  >
  <send>ts callout Round One - Nexus has spawned!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault gives a Restorative Crystal to (.*)\.$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="12"
  >
  <send>script_callout("@GRestorative Crystal @Cgiven to: @W%1@C.")</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault gives Shroud of the Void to (.*)\.$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="12"
  >
  <send>script_callout("@DShroud of the Void @Cgiven to: @W%1@C.")</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Captain of the Assault exclaims \'That attack just wiped out all our Siege Golems\!\'$"
   regexp="y"
   sequence="100"
   group="trans_leader"
   send_to="12"
  >
  <send>script_callout("Safe to move!!")</send>
  </trigger>
  <trigger
   enabled="n"
   match="^A Titan Lieutenant cheers as the Gates fall\, and advances into the breach\!$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>ts callout Round Three - Complete</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Av asks \'Ugh, now we have to go back\. What was the passphrase again\? (.+)\?\'$"
   regexp="y"
   send_to="12"
   sequence="100"
   group="trans0"
  >
  <send>
av_pw = "%1"
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^Ar exclaims \'No you nitwit\, it is (.+)\!\'$"
   regexp="y"
   send_to="12"
   sequence="100"
   group="trans0"
  >
  <send>
ar_pw = "%1"
local cb = "say " .. av_pw .. ";say " .. ar_pw
SetClipboard(cb)
ColourNote("khaki", "", "Sent to clipboard: " .. cb)
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^Aion\'s spell is abruptly disrupted, causing a sudden feedback of dissonant energies\!$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>ts callout Image slain, big dam on Aion!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^You see a massive fireball launched in your direction\!$"
   regexp="y"
   send_to="12"
   sequence="98"
   keep_evaluating="n"
   group="trans0"
  >
  <send>
show_alert("INCOMING FIREBALL!")
Send("say @RINCOMING FIREBALL!@w")
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^\s+An incoming massive fireball is about to engulf this area\!$"
   regexp="y"
   send_to="12"
   sequence="98"
   keep_evaluating="y"
   group="trans0"
  >
  <send>
show_alert("INCOMING FIREBALL!")
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^Aion wears Sacred Shield as a shield\.$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>ts callout Aion is shielded, cleave with @WT@wh@Wa@wn@Wd@wc@Wr@wi@Ws@wt</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Aion\'s divine aura regenerates and stabilises, rendering him invulnerable once more\!$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>ts callout Aion is @Rinvulnerable@C!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^(\(\w\)){0,}\s?Av and Ar stand here bickering with each other\.\s?$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans0"
  >
  <send>say Av and Ar are here!</send>
  </trigger>
  <trigger
   enabled="n"
   match="^Your acute senses detect a presence in the room\.$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>
say Lurker here!
backstab lurker
  </send>
  </trigger>
  <trigger
   enabled="n"
   match="^You see a healing geyser erupt at room (.+)\.$"
   regexp="y"
   send_to="10"
   sequence="100"
   group="trans_leader"
  >
  <send>ts callout healing geyser in room %1</send>
  </trigger>
  <trigger
   enabled="n"
   group="trans0"
   match="^You see chaotic energies surge in from all around\, and realise it would (be )?best not to move\.$"
   omit_from_output="n"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>show_alert("DO NOT MOVE!")</send>
  </trigger>
  <trigger
   enabled="n"
   match="{kelscan}"
   regexp="n"
   script="startCapture"
   omit_from_output="y"
   sequence="100"
   group="trans_leader_conditional"
  >
  </trigger>
  <trigger
   enabled="n"
   match="{/kelscan}"
   regexp="n"
   script="endCapture"
   omit_from_output="y"
   sequence="100"
   group="trans_leader_conditional"
  >
  </trigger>
  <trigger
   match="^(?<Distance>\d) (?<Direction>West|North|South|East) from here you see:$"
   regexp="y"
   enabled="n"
   group="trans_leader_conditional"
   sequence="100"
   script="transScanDir"
  >
  </trigger>
  <trigger
   match="^Right here you see:$"
   regexp="y"
   enabled="n"
   group="trans_leader_conditional"
   sequence="100"
   script="transScanDir"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^(?<Direction>West|North|South|East) from here you see:$"
   regexp="y"
   group="trans_leader_conditional"
   sequence="100"
   script="transScanDir"
  >
  </trigger>
  <trigger
   enabled="n"
   group="trans_leader_conditional"
   match=".*(?<mobName>A seraphim scout)"
   regexp="y"
   script="transScanAnnounce"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="trans_leader_conditional"
   match=".*(?<mobName>An angelic Executioner)"
   regexp="y"
   script="transScanAnnounce"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="trans_leader_conditional"
   match=".*(?<mobName>A colossal cherub)"
   regexp="y"
   script="transScanAnnounce"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="trans0"
   match="^[\-]{54,80}$"
   regexp="y"
   send_to="12"
   sequence="99"
  ><send>
local b = not GetTriggerInfo("entropy_line_1", 8)
EnableTriggerGroup("entropy_lines", b)
DebugNote("Set entropy_lines trigger group enabled flag to: ", string.upper(tostring(b)),".")
if b == true then
	DoAfterSpecial(1, 'EnableTriggerGroup("entropy_lines", false) DebugNote("Set entropy_lines trigger group enabled flag to: FALSE.")', 12)
end
  </send>
  </trigger>
  <trigger
   enabled="n"
   name="entropy_line_1"
   group="entropy_lines"
   match="^.*\s(.+)\!?\.?$"
   regexp="y"
   script="build_cipher"
   sequence="99"
   keep_evaluating="y"
  >
  </trigger>
  <trigger
   enabled="n"
   name="entropy_line_2"
   group="entropy_lines"
   match="^.*$"
   regexp="y"
   script="decrypt"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   name="maze_line"
   group="maze_lines"
   match="^[\+\-\s\<\>\!\|\#\*\^v]{45}$"
   omit_from_output="n"
   regexp="y"
   script="capture_maze"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="maze_lines"
   match="^\<transmaze\>$"
   omit_from_output="y"
   regexp="y"
   script="reset_maze"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   group="maze_lines"
   match="^\<\/transmaze\>$"
   omit_from_output="y"
   regexp="y"
   script="report_maze"
   sequence="100"
  >
  </trigger>  
</triggers>

<script>
<![CDATA[

require "gmcphelper"
require "tprint"

local current_area = nil
local debug_mode = GetVariable("debug_mode") or "false"
local last_check = 0
local field = {}
local field_row = {}
local field_lines_captured = 0
local minigame = ""
local moves_y_x = {{-1, 0, "n"}, {1, 0, "s"}, {0, -1, "w"}, {0, 1, "e"}}
local moves_x_y = {{0, -1, "n"}, {0, 1, "s"}, {-1, 0, "w"}, {1, 0, "e"}}
local maze_lines_captured = 0
local maze = {}
local maze_raw = {}
local maze_captured = false
local guardians = {}
local guardian_found = false
local maze_start = 47684
local maze_end = 47806
local maze_columns = 11
local maze_rows = 11
local bladeholders = nil
local enableFlag = GetVariable("enableFlag") or "true"
local isLeader = false
local trans_channel_name = GetVariable("trans_channel_name") or "gt @x232[@x090T@x127r@x133a@x176n@x182s@x225c@x015e@x153n@x117d@x232]@C "
local sendMessage = ""
local firstRun = ""
local cipher = {
	{ "You detect ominous bloodlust directed at you!", "FLEE IMMEDIATELY OR DIE!", "local" },
	{ "Aion gazes at you, and smirks. That cannot be good.", "FLEE IMMEDIATELY OR DIE!", "local" },
	{ "You sense Aion gathering a massive amount of energy!", "FLEE IMMEDIATELY - BLIND OR IRON MAIDEN!", "local" },
	{ "Aion is suddenly surrounded by an aura of inversion!", "@RAura of inversion. @COff Aion!", "group" },
	{ "Lethal chaotic energies radiate out from Aion, blanketing the area with unstable raw power!", "@RChaotic energies erupt around Aion. @CGet to a safe room!@w", "group", "map;look" },
	{ "A rift opens, as Aion begins to channel energy from another dimension!", "@WImage rift @Copened! Enter rift and slay @RImage of Aion@C.", "group" },
	{ "A sphere of energy begins to float towards you! It would be wise to run!", "FLEE FROM SPHERE!", "local" },
	{ "Aion blows the Horn of Eternia, and wisps of Time begin to gather!", "@WWisps @Chave spawned!", "group" },
	{ "An impending sense of doom permeates your senses.", "FLEE IMMEDIATELY - BLIND OR IRON MAIDEN!", "local" },
	{ "Overwhelming pressure makes you think that you should flee for your life!", "FLEE IMMEDIATELY OR DIE!", "local" },
	{ "Aion condenses a massive amount of energy into a small sphere, launching it at you!", "SPHERE LAUNCHED AT YOU!", "local", "map" }
}
local skip_decrpyt = false
local exceptions = {
	"          Tucked into a safe space, you watch in awe as maelstroms of",
	"                    arcane energies explode all around you!",
	"A dreadful influx of energy is drawn into a mana vortex.",
	"A Sphere of Energy begins to float away from Aion towards its target! Run!",
	"A Sphere of Energy smashes into ",
	"You throw yourself in front of a Sphere of Energy to save",
	"Impacting with its target, ",
	"You see a Sphere of Energy smash into the unlucky ",
	"                 The fabric of time and space warps around you!"
}
local edit_distance_threshold = 7
local play_sound = true
local alert_sound = "gsocial.wav"
local av_pw, ar_pw = "", ""
white_rune = false
inversion_time = nil


function OnPluginBroadcast(msg, id, name, text)
    if enableFlag == "true" then
		if id == "3e7dedbe37e44942dd46d264" and text == "room.info" then
			local rid = tonumber(gmcp("room.info.num"))
			if rid >= maze_start and rid <= maze_end then
				EnableTriggerGroup("maze_lines", true)
				DebugNote("Maze_lines trigger group has been", "ENABLED.")
			elseif GetTriggerInfo("maze_line", 8) then
				EnableTriggerGroup("maze_lines", false)
				DebugNote("Maze_lines trigger group has been", "DISABLED.")
			end
		end
    end
end


function OnPluginInstall()
	OnPluginEnable()
end

function OnPluginEnable()
	OnHelp()
	set_trigger_groups()
end

function DebugNote(...)
    if debug_mode == "true" then
        ColourTell("magenta", "", "DEBUG: ")
        print_alternating_note({...}, "lavender", "khaki")
    end
end

function print_alternating_note(messages, regular_color, highlight_color, background)
    local current_color, other_color = regular_color, highlight_color
    background = background or ""

    for i, message in ipairs(messages) do
        ColourTell(current_color, background, message)
        current_color, other_color = other_color, current_color
    end
    print("")
end

function alias_callout(name, line, wc)
	if type(tostring(wc[1])) == "string" then
		Send(trans_channel_name .. wc[1] .. "@w")
	else
		DebugNote("alias_callout function received invalid wildcard.")
	end
end

function script_callout(text)
	if type(tostring(text)) == "string" then
		Send(trans_channel_name .. text .. "@w")
	else
		DebugNote("script_callout function received invalid argument.")
	end
end

function OnHelp()
	DebugNote("OnHelp function called.")
	ColourNote("khaki", "", GetPluginInfo(GetPluginID(), 3))
end

function find_player()
	local i, j
	for i = 1, #field do
		for j = 1, #field[i] do
			if string.find(field[i][j], "#", 1, true) then
				DebugNote("Player found at ", "(" .. tostring(i) .. "," .. tostring(j) .. ")", ".")
				return { i, j }
			end
		end
	end
	return nil
end

function find_rooms(t, r)
	local i, j
	local results = {}
	for i = 1, #t do
		for j = 1, #t[i] do
			if string.find(t[i][j], r, 1, true) then
				DebugNote("Room '", r, "' found at ", "(" .. tostring(i) .. "," .. tostring(j) .. ")", ".")
				table.insert(results, { i, j })
			end
		end
	end
	if next(results) ~= nil then
		return results
	else
		DebugNote("Room '", r, "' NOT found on the field!")
		return nil
	end
end

function set_minigame(name, line, wc)
	DebugNote("Set_minigame function called: ", name, ".")
	if string.sub(name, 1, 7) == "meteors" then
		if isLeader then
			Execute("ts callout Meteors starting!")
		end
		AddTimer("minigame_reset", 0, 0, 45, "", 5, "set_minigame")
	elseif string.sub(name, 1, 7) == "ratmaze" then
		minigame = "ratmaze"
		AddTimer("minigame_reset", 0, 0, 45, "", 5, "set_minigame")
	else
		minigame = ""
	end
end

function sayConduits()
	EnableTriggerGroup("trans_leader_conditional", true)
	DebugNote("Enabled trans_leader_conditional trigger group.")
	DoAfterSpecial(3.5, 'EnableTriggerGroup("trans_leader_conditional", false) DebugNote("Disabled trans_leader_conditional trigger group.")', 12)
	Send("look")
end

function set_leader(override)
	if type(override) == "boolean" then
		isLeader = override
	else
		isLeader = not isLeader
	end
	ColourNote("khaki", "", "Leader set to: " .. string.upper(tostring(isLeader)) .. ".")
	print("")
	set_trigger_groups()
end

function set_debug()
	if debug_mode == "true" then
		debug_mode = "false"
	else
		debug_mode = "true"
	end
	SetVariable("debug_mode", debug_mode)
	ColourNote("khaki", "", "Debug mode set to: " .. string.upper(debug_mode) .. ".")
	print("")
end

function set_trigger_groups()
	DebugNote("Setting up trigger groups for Enabled: ", string.upper(enableFlag), " and isLeader: ", string.upper(tostring(isLeader)), ".")
	if enableFlag == "true" then
		EnableTriggerGroup("trans0", true)
		DebugNote("Enabling ", "trans0", " trigger group.")
		EnableTriggerGroup("trans_leader_conditional", false)
		EnableTriggerGroup("trans1", false)
		EnableTriggerGroup("trans2", false)
		EnableTriggerGroup("maze_lines", true)
		if isLeader then
			EnableTriggerGroup("trans_leader", true)
			DebugNote("isLeader is true: enabling ", "trans_leader", " trigger group.")
		else
			EnableTriggerGroup("trans_leader", false)
			DebugNote("isLeader is false: disabling ", "trans_leader", " trigger group.")
		end
	else
		EnableTriggerGroup("trans0", false)
		EnableTriggerGroup("trans_leader", false)
		EnableTriggerGroup("trans_leader_conditional", false)
		EnableTriggerGroup("trans1", false)
		EnableTriggerGroup("trans2", false)
		EnableTriggerGroup("entropy_lines", false)
		EnableTriggerGroup("maze_lines", false)
		DebugNote("Disabling all trigger groups.")
	end
end

-- Set the alias name for the leaders epic text alias
function setAliasName(name, line, args)
	newEcn = args.echanname
	trans_channel_name = newEcn
	SetVariable("trans_channel_name", newEcn)
	ColourNote("khaki","","TSPlugin NOTICE: Trans Channel Alias changed to ".. newEcn)
	print("")
	SaveState()
end

-- Display the epic text alias to the user
function showAliasName()
	curEcn = getAliasName()
	ColourNote("khaki","","TSPlugin NOTICE: Trans Channel Alias is ".. curEcn)
	print("")
end

-- Return the variable that stores the epic text alias
function getAliasName()
	ecn = GetVariable("trans_channel_name") or "gt @x232[@x090T@x127r@x133a@x176n@x182s@x225c@x015e@x153n@x117d@x232]@C "
	return ecn
end

-- Enable or Disable trigger group
function enableDisable(name, line, args)
	-- Get the text sent from the alias
	local e = args.endis
	
	-- If user wants to enable
	if e == "enable" then
		ColourNote("khaki","","TSPlugin NOTICE: Enabling Trans Helper.")
		print("")
		enableFlag = "true"
		set_trigger_groups()
		SetVariable("enableFlag", enableFlag)
		
	-- If user wants to disable
	elseif e == "disable" then
		ColourNote("khaki","","TSPlugin NOTICE: Disabling Trans Helper.")
		print("")
		enableFlag = "false"
		set_trigger_groups()
		SetVariable("enableFlag", enableFlag)
		
	-- User sent bad data
	else
		ColourNote("Red","","TSPlugin ERROR: "..enableFlag.." is an invalid argument.")
		print("")
	end
end

function isEnabled()
	if enableFlag == "true" or enableFlag == "false" then
		ColourTell("khaki", "", "Trans Helper plugin is: ")
		ColourTell("white", "", enableFlag == "true" and "ENABLED" or "DISABLED")
		ColourNote("khaki", "", ".")
		ColourTell("khaki", "", "Trans leader is set to: ")
		ColourTell("white", "", string.upper(tostring(isLeader)))
		ColourNote("khaki", "", ".")
		ColourTell("khaki", "", "Trans_leader trigger group: ")
		ColourTell("white", "", string.upper(tostring(GetTriggerInfo("trans_leader_onoff", 8))))
		ColourNote("khaki", "", ".")
		ColourTell("khaki", "", "Trans_leader_conditional trigger group: ")
		ColourTell("white", "", string.upper(tostring(GetTriggerInfo("trans_leader_conditional_onoff", 8))))
		ColourNote("khaki", "", ".")
		ColourTell("khaki", "", "Trans0 trigger group: ")
		ColourTell("white", "", string.upper(tostring(GetTriggerInfo("trans0_onoff", 8))))
		ColourNote("khaki", "", ".")
		ColourTell("khaki", "", "Entropy_lines trigger group: ")
		ColourTell("white", "", string.upper(tostring(GetTriggerInfo("entropy_line_1", 8))))
		ColourNote("khaki", "", ".")
		ColourTell("khaki", "", "Maze_lines trigger group: ")
		ColourTell("white", "", string.upper(tostring(GetTriggerInfo("maze_line", 8))))
		ColourNote("khaki", "", ".")
		print("")
	
	-- Honestly, it should only ever return true or false....but just in case....
	else
		ColourNote("Red","","Trans Helper plugin ERROR: You should NEVER see this error...")
		print("")
	end
end

-- Set the variable for the bladers, and call out who they are
function bladers(name, line, args)
	bladetemp = args.Players
	length = string.len(bladetemp)
	bladeholders = string.sub(bladetemp, 1, length - 1)
	script_callout("@DVoid Blades@C given to@C:@W " .. bladeholders .. "@C.")
end

function sayBlades(name, line, args)
	if bladeholders then
		script_callout("@DVoid blades@C:@W " .. bladeholders .. "@C.")
	else
		ColourNote("Red","","TSPlugin ERROR: bladeholders was nil.")
		print("")
	end
end

-- Send the scan command to capture the output
function transScanStart()
	if tonumber(gmcp("char.status.state")) ~= 8 then
		EnableTriggerGroup ("trans_leader_conditional", true)
		DebugNote("Enabling trans_leader_conditional trigger group.")
		SendNoEcho("echo {kelscan}")
		SendNoEcho("scan")
		SendNoEcho("echo {/kelscan}")
		SendNoEcho("map")
		DebugNote("Echo tags and scan command sent.")
	else
		ColourNote("Red","","TSPlugin ERROR: can't scan in combat.")
		print("")
	end
end
	
-- Start the capture of the config output
function startCapture(name, line, args)
	firstRun = "y"
	ColourNote("Red","","Scan Started")
end
	
-- End the capture of the config output and draw the window
function endCapture(name, line, args)
	ColourNote("Red","","Scan Ended")
	EnableTriggerGroup ("trans_leader_conditional", false)
	DebugNote("Disabling trans_leader_conditional trigger group.")
	if (sendMessage == "y") and (MobList ~= nil) then
		script_callout("@W" .. CurrentDirection .. " @x232-> [" .. MobList .. "@x232]$C")
	end
	sendMessage = "n"
end
	
-- Get the current direction
function transScanDir(name, line, args)
	if firstRun == "y" then 
		firstRun = "n"
	elseif sendMessage == "y" then
		sendMessage = "n"
		if MobList ~= nil then
			script_callout("@W" .. CurrentDirection .. " @x232-> [" .. MobList .. "@x232]$C")
		end
	end
	CurrentDirection = nil
	MobList = nil
		
	Distance = args.Distance
	Direction = args.Direction
			
	if Direction ~= nil then
		if Direction == "East" then Direction = "E"
		elseif Direction == "West" then Direction = "W"
		elseif Direction == "North" then Direction = "N"
		elseif Direction == "South" then Direction = "S"
		end
			
		CurrentDirection = Direction
	else
		CurrentDirection = "CENTER"
	end
		
	if Distance ~= nil then
		CurrentDirection = Distance .. CurrentDirection
	elseif Direction ~= "CENTER" then
		CurrentDirection = " " .. CurrentDirection
	end
end
	
function transScanAnnounce(name, line, args)
	DebugNote("transScanAnnounce function triggered.")
	mobName = args.mobName
	if mobName == "A seraphim scout" then
		DebugNote("Found a scout.")
		mobName = "scout"
		mobColor = "@R"
	elseif mobName == "An angelic Executioner" then
		DebugNote("Found an executioner.")
		mobName = "executioner"
		mobColor = "@C"
	elseif mobName == "A colossal cherub" then
		DebugNote("Found a cherub.")
		mobName = "cherub"
		mobColor = "@M"
	end 
	--a seraphim scout
	--An angelic Executioner
	
	if MobList == nil then
		MobList = mobColor .. mobName
	else
		MobList = MobList .. ", " .. mobColor .. mobName
	end
	
	sendMessage = "y"
end

function show_alert(msg)
	Note("")
	NoteStyle(2)
	ColourNote("white", "firebrick", "----  " .. msg .. "  ----")
	NoteStyle(0)
	Note("")
	if play_sound then PlaySound(0, alert_sound) end
end

function decrypt(name, line, wc)
	if skip_decrpyt then
		DebugNote("Skip_decrpyt is true. Not attempting to decrypt.")
		skip_decrpyt = false
		return
	end
	
	DebugNote("Attempting to decrypt message: ", line)
	local success = false
		
	for _, v in ipairs(cipher) do
		if utils.edit_distance(line, v[1]) <= edit_distance_threshold then
			DebugNote("Successfully decrypted to: ", v[1])
			success = true
			if v[3] == "group" then
				if isLeader then
					script_callout(v[2])
				else
					if string.sub(v[1], 1, 10) ~= "Aion blows" and string.sub(v[2], 1, 15) ~= "Sphere launched" then
						show_alert(v[2])
					end
				end
			else
				show_alert(v[2])
			end
			if v[4] then
				Execute(v[4])
			end
			if v[1] == "Aion is suddenly surrounded by an aura of inversion!" then
				inversion_time = os.time()
				DebugNote("Inversion started at time: ", inversion_time, ".")
				DoAfterSpecial(30, 'NoteHr() Note("30 seconds have passed since inversion start.") NoteHr()', 12)
				DoAfterSpecial(40, 'NoteHr() Note("40 seconds have passed since inversion start.") NoteHr()', 12)
			end
			break
		end
	end
	if not success then
		DebugNote("Failed to decrypt the message.")
	end
end

function build_cipher(name, line, wc)
	DebugNote("Build_cipher function called with wc: ", wc[1], ".")
	local key = ""
	local key_you = { "Aion condenses a massive amount of energy into a small sphere, launching it at you!", "SPHERE LAUNCHED AT YOU!", "local", "map" }
	local fname = ""
	local name = wc[1]
	local skip_custom = false
	
	for _, v in ipairs(exceptions) do
		if string.find(line, v, 1, true) then
			DebugNote("Line found in exceptions table. Setting skip_decrpyt to true.")
			skip_decrpyt = true
			return
		end
	end
	
	for i = 1, #name do
        local char = name:sub(i, i)
        if char:match("%a") then
            fname = fname .. char
        end
    end
	
	if fname == "you" then
		DebugNote("Cipher already has an alert for a sphere targeted at you.")
		skip_custom = true
	elseif #name < 3 then
		DebugNote("Something went wrong. The name captured was < 3 characters in length.")
		skip_custom = true
	elseif utils.edit_distance(fname, "you") <= 1 then
		DebugNote("Target was you? Cipher already has an alert for a sphere targeted at you.")
		skip_custom = true
	end
	
	reset_cipher()
	
	if not skip_custom then
		key = "Aion condenses a massive amount of energy into a small sphere, launching it at " .. fname .. "!"
		DebugNote("Adding to cipher: ", key)
		table.insert(cipher, { key, "Sphere launched at @W" .. fname .. "@C! Run away and stay clear of other players!", "group" })
	else
		skip_custom = false
	end
	DebugNote("Adding to cipher: ", key_you[1])
	table.insert(cipher, key_you)
end

function reset_cipher()
	cipher = {
		{ "You detect ominous bloodlust directed at you!", "FLEE IMMEDIATELY OR DIE!", "local" },
		{ "Aion gazes at you, and smirks. That cannot be good.", "FLEE IMMEDIATELY OR DIE!", "local" },
		{ "You sense Aion gathering a massive amount of energy!", "FLEE IMMEDIATELY - BLIND OR IRON MAIDEN!", "local" },
		{ "Aion is suddenly surrounded by an aura of inversion!", "@RAura of inversion. @COff Aion!", "group" },
		{ "Lethal chaotic energies radiate out from Aion, blanketing the area with unstable raw power!", "@RChaotic energies erupt around Aion. @CGet to a safe room!@w", "group", "map;look" },
		{ "A rift opens, as Aion begins to channel energy from another dimension!", "@WImage rift @Copened! Enter rift and slay @RImage of Aion@C.", "group" },
		{ "A sphere of energy begins to float towards you! It would be wise to run!", "FLEE FROM SPHERE!", "local" },
		{ "Aion blows the Horn of Eternia, and wisps of Time begin to gather!", "@WWisps @Chave spawned!", "group" },
		{ "An impending sense of doom permeates your senses.", "FLEE IMMEDIATELY - BLIND OR IRON MAIDEN!", "local" },
		{ "Overwhelming pressure makes you think that you should flee for your life!", "FLEE IMMEDIATELY OR DIE!", "local" }
	}
	DebugNote("Reset cipher to default values.")
end

function reset_maze()
	maze = {}
	maze_raw = {}
	maze_lines_captured = 0
	maze_captured = false
	guardians = {}
	guardian_found = false
end

function capture_maze(name, line, wc, styles)
	if maze_lines_captured >= 23 then
		DebugNote("Previously captured,", tostring(maze_lines_captured), " lines - resetting the maze table.")
		reset_maze()
	end
	
	maze_lines_captured = maze_lines_captured + 1
	--DebugNote("Line #", tostring(maze_lines_captured), " captured: ", line)
	maze[maze_lines_captured] = {}
	maze_raw[maze_lines_captured] = line
	
	for i = 2, 42, 4 do
		table.insert(maze[maze_lines_captured], string.sub(line, i, i + 2))
	end
	
	if #styles > 1 then
		local current_length = 0
		for i = 1, #styles, 1 do
			if (styles[i]["textcolour"] == 255) and (string.find(styles[i]["text"], "*", 1, true) or string.find(styles[i]["text"], ">!<", 1, true)) then
				local g = { math.ceil((current_length + 1)/4), maze_lines_captured / 2 }
				DebugNote("Guardian found at coords: " .. tostring(g[1]) .. "x" .. tostring(g[2]) .. "y")
				table.insert(guardians, g)
				guardian_found = true
			end
			if type(styles[i]["length"]) == "number" then current_length = current_length + styles[i]["length"] end
		end
	end
	
	if maze_lines_captured == 23 then
		maze_captured = true
		
		if next(guardians) ~= nil then
			ColourNote("violet", "", "Guardian(s) found:")
			for k, v in ipairs (guardians) do
				ColourTell("violet", "", "  #" .. tostring(k) .. " " .. tostring(v[1]) .. "x" .. tostring(v[2]) .. "y")
				
				local p = find_path_maze({0,0}, {v[1], v[2]})
				if p then
					if type(p) == "table" then
						p = compress_path(table.concat(p))
					else
						p = compress_path(p)
					end
					
					table.insert(guardians[k], p)
					ColourTell("limegreen", "", " - Path found: ")
					Hyperlink("run " .. p, "run " .. p, "", "white", "black", false)
					print("")
				else
					ColourNote("red", "", " - No path found.")
				end
			end
		else
			ColourNote("red","", "No guardians found.")
		end
	end
end

function maze_coords_to_rid(x, y)
	return maze_start + (x-1) + ((y-1) * maze_columns)
end

function maze_rid_to_coords(rid)
	if not tonumber(rid) then
		ColourNote("red", "", "Invalid room id received in maze_rid_to_coords()")
		return nil
	end
	
	local x = 1 + (tonumber(rid) - maze_start) % maze_columns
	local y = 1 + math.floor((tonumber(rid) - maze_start) / maze_columns)
	return { x, y }
end

function find_path_maze(src, dest)
	local results = {}
	local visited = {}
	local queue = {}
	local path = ""
	local current = {}
	local move = {}
	DebugNote("Trying to find path from ", tostring(src[1]) .. "x" .. tostring(src[2]) .. "y", "(" .. maze_coords_to_rid(src[1], src[2]) .. ")", "to", tostring(dest[1]) .. "x" .. tostring(dest[2]) .. "y", "(" .. maze_coords_to_rid(dest[1], dest[2]) .. ").")
	queue = {{src, {}}}
 
	while #queue > 0 do
		current, path = unpack(table.remove(queue, 1))
			
		-- Check if the current location is the end
		if current[1] == dest[1] and current[2] == dest[2] then
			return path
		end
 
		-- Add the current location to the visited set
		visited[current[1]] = visited[current[1]] or {}
		visited[current[1]][current[2]] = true
		
		-- Add the neighboring locations to the queue
		if current[1] == 0 and current[2] == 0 then
			table.insert(queue, {{ 6, 3 }, "n" })
			table.insert(queue, {{ 9, 6 }, "e" })
			table.insert(queue, {{ 6, 9 }, "s" })
			table.insert(queue, {{ 3, 6 }, "w" })
		else
			local neighbors = get_neighbors(current)
			
			if next(neighbors) ~= nil then
				for _, v in ipairs(neighbors) do
					visited[v[1]] = visited[v[1]] or {}
					if not visited[v[1]][v[2]] and not is_queued(queue, v[1], v[2]) then
						table.insert(queue, {{v[1], v[2]}, type(path) == "table" and table.concat(path) .. v[3] or path .. v[3]})
					end
				end
			else
				DebugNote("No valid neighbors found to room", tostring(current[1]), "x", tostring(current[2]), "y.")
			end
		end
	end
	-- If no path was found, return nil
	return nil
end

function is_queued(q, x, y)
	for _, v in ipairs(q) do
		if v[1][1] == x and v[1][2] == y then
			return true
		end
	end
	
	return false
end

function get_neighbors(r)
	local x, y = unpack(r)
	local neighbors = {}
	DebugNote("Looking for valid neighbors of room", tostring(x) .. "x", tostring(y) .. "y.")
	
	local index = 1 + (tonumber(x)-1) * 4

	if string.sub(maze_raw[tonumber(y) * 2], index, index) ~= "|" then
		DebugNote("West is a valid neighbor.")
		local n = {}
		if x == 1 then
			table.insert(n, 11)
		else
			table.insert(n, x-1)
		end
		table.insert(n, y)
		table.insert(n, "w")
		table.insert(neighbors, n)
	end
	
	if string.sub(maze_raw[tonumber(y) * 2], index+4, index+4) ~= "|" then
		DebugNote("East is a valid neighbor.")
		local n = {}
		if x == 11 then
			table.insert(n, 1)
		else
			table.insert(n, x+1)
		end
		table.insert(n, y)
		table.insert(n, "e")
		table.insert(neighbors, n)
	end
	
	if maze[tonumber(y) * 2 - 1][tonumber(x)] ~= "---" then
		DebugNote("North is a valid neighbor.")
		local n = {}
		table.insert(n, x)
		if y == 1 then
			table.insert(n, 11)
		else
			table.insert(n, y-1)
		end
		table.insert(n, "n")
		table.insert(neighbors, n)
	end
	
	if maze[tonumber(y) * 2 + 1][tonumber(x)] ~= "---" then
		DebugNote("South is a valid neighbor.")
		local n = {}
		table.insert(n, x)
		if y == 11 then
			table.insert(n, 1)
		else
			table.insert(n, y+1)
		end
		table.insert(n, "s")
		table.insert(neighbors, n)
	end
	
	return neighbors
end

function compress_path(str)
	if not str then
		ColourNote("red", "", "Invalid string received in function compress_path().")
		return
	end

    local result = ""
    local count = 1
    
    -- Loop through the string
    for i = 1, #str do
        local currentChar = str:sub(i, i)
        
        -- Check if the next character is the same as the current one
        if str:sub(i, i) == str:sub(i + 1, i + 1) then
            count = count + 1
        else
            -- If the count is greater than 1, prepend the count
            if count > 1 then
                result = result .. count .. currentChar
            else
                result = result .. currentChar
            end
            count = 1 -- Reset count
        end
    end
    
    return result
end

function echo_test_maze()
	EnableTriggerGroup("maze_lines", true)
	print()
	Simulate("<transmaze>\n")
	Simulate("+---+---+---+---+---+---+   +   +---+---+   +\n")
	Simulate("|       |       |       |                   |\n")
	Simulate("+   +   +   +   +   +---+   +---+---+---+   +\n")
	Simulate("|   | "..ANSI(1, 31).."*"..ANSI(0, 37).."     |   |   |           |       |   |\n")
	Simulate("+   +---+   +   +   "..ANSI(1, 37).."^   ^"..ANSI(0, 37).."---+---+   +   +   +\n")
	Simulate("|       |       |           |       |   |   |\n")
	Simulate("+---+   +   +   +---"..ANSI(1, 37).."^   ^"..ANSI(0, 37).."---+   +---+   +   +\n")
	Simulate("|       |   |       |   |           |   |   |\n")
	Simulate("+   +---+   +---+   +---+   +---+---+   +   +\n")
	Simulate("        |       |   |       |   |       |### \n")
	Simulate("+   +   "..ANSI(1, 37).."<"..ANSI(0, 37).."---"..ANSI(1, 37).."<"..ANSI(0, 37).."   +   +   +---+   "..ANSI(1, 37)..">   >"..ANSI(0, 37).."---+   +\n")
	Simulate("|   |       |                   |   |       |\n")
	Simulate("+   +   "..ANSI(1, 37).."<   <"..ANSI(0, 37).."   +   +---+   +---"..ANSI(1, 37)..">   >"..ANSI(0, 37).."---+   +\n")
	Simulate("        |   |   |       |           |        \n")
	Simulate("+   +---+---+   +   +   +---+---+   +   +   +\n")
	Simulate("|   |       |   |   |                       |\n")
	Simulate("+   +   +   +   +---"..ANSI(1, 37).."v   v"..ANSI(0, 37).."   +---+   +---+---+\n")
	Simulate("|       |   |   |       |       |    "..ANSI(1, 31)..">!<"..ANSI(0, 37).."    |\n")
	Simulate("+   +---+   +   +   "..ANSI(1, 37).."v   v"..ANSI(0, 37).."   +---+---+---+   +\n")
	Simulate("|   |       |       |   |                   |\n")
	Simulate("+   +   +---+---+---+   +---+   +---+---+   +\n")
	Simulate("    |                           |            \n")
	Simulate("+---+---+---+---+---+---+   +   +---+---+   +\n")
	Simulate("</transmaze>\n")
	print()
end

function tprint_maze()
	print("guardian_found = " .. tostring(guardian_found))
	print("guardians table:")
	tprint(guardians)
	print("maze_lines_captured = " .. tostring(maze_lines_captured))
	print("maze table:")
	tprint(maze)
	print("maze_raw table:")
	tprint(maze_raw)
end

function report_maze_cmd()
	EnableTriggerGroup("maze_lines", true)
	SendNoEcho("echo <transmaze>")
	SendNoEcho("map")
	SendNoEcho("echo </transmaze>")
	DebugNote("Echo commands sent to report the maze.")
end

function report_maze(name, line, wc, styles)
	if next(guardians) ~= nil then
		local msg = "map room to guards | "
		
		for k, v in ipairs (guardians) do
			msg = msg .. "@R#" .. tostring(k) .. ": @W" .. v[3]
			
			if k < #guardians then
				msg = msg .. "@C | "
			else
				script_callout(msg)
			end
		end
	else
		ColourNote("red","", "No guardians to report.")
	end
end

function report_tid()
	local ri = gmcp("room.info")
	local cs = gmcp("char.status")
	local rid = tonumber(ri.num)
	local rn = ri.name
	local rz = ri.zone
	local mobaim = tostring(cs.enemy) or "unknown"
	local mobpct = tonumber(cs.enemypct) or "unknown"
	
	if not rid then
		ColourNote("red", "", "Invalid room id number received from GMCP.")
		return
	end

	if rid >= maze_start and rid <= maze_end then
		local p = compress_path(find_path_maze({ 0, 0 }, maze_rid_to_coords(rid)))
		Send("gt @r[@W"..p.."@r] [@x195"..mobaim..": @C"..mobpct.."%@r]@w")
	else
		Send("gt @r[@Y"..rz.."@r] [@W"..rid.."@r] [@x195"..mobaim..": @C"..mobpct.."%@r]@w")
	end
end

]]>
</script> 

</muclient>