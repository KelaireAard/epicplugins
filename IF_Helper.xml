<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, December 23, 2021, 10:44 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "IF_Helper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="IceFall_IFWestHelper"
   author="Kelaire"
   id="90631ed8325fde54c5732d59"
   language="Lua"
   purpose="Help with the IF Rat Maze"
   date_written="2021-12-23 22:44:03"
   requires="5.06"
   version="1.0"
   >
   
   <description trim="n">
   		<![CDATA[
.----------------------------------------------------------------------------.
|                           Icefall Rat Maze Helper                          |
|----------------------------------------------------------------------------|
|if help -- Brings up the help section. (What you are reading now)           |
|                                                                            |
|if show -- Start displaying the miniwindow.                                 |
|if hide -- Stop displaying the miniwindow.                                  |
|if reset -- Resets miniwindow position and size.                            |
|                                                                            |
'----------------------------------------------------------------------------'
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>

<!-- trigger to match start of inventory -->

  <trigger
   enabled="y"
   match="^\s+---------------------------$"
   regexp="y"
   script="initializeMap"
   sequence="100"
  >
  </trigger>
  
<!-- trigger to match an inventory line -->

  <trigger
   match="*"
   name="map_line"
   enabled="n"
   script="loadMap"
   sequence="50"
  >
  </trigger>

<!-- trigger to match end of inventory -->
  
  <trigger
   match="^\[(\d|\s)(\d|\s)(\d|\s)\s\s[a-zA-Z]+\s\s\s[A-Z](\+|\s)(\d|\s)\]\s[a-zA-Z]+\s+\d+\s+.*$"
   name="stop_crap"
   regexp="y"
   script="disableShit"
   sequence="30"
   keep_evaluating="y"
  >
  </trigger>
  
  <trigger
   match="---------------------------$"
   name="map_end"
   regexp="y"
   script="printMap"
   sequence="40"
  >
  </trigger>
    
</triggers>

<!--  Aliases  -->
<aliases>
  <alias script="ShowHelp" match="^if( help)?$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
  <alias script="ShowWindow" match="^if show$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
  <alias script="HideWindow" match="^if hide$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
  <alias script="ResetWindow" match="^if reset$" enabled="y" regexp="y" sequence="100" ignore_case="y"></alias>
</aliases>

<script>

<![CDATA[

require "serialize"

local map_table = {}
local ratMaze = {}
-- REAL COORDs
--local idToCoords = {
--	[38806] = {x=1, y=6}, [38807] = {x=2, y=6}, [38808] = {x=3, y=6}, [38809] = {x=4, y=6}, [38810] = {x=5, y=6}, [38811] = {x=6, y=6}, [38812] = {x=7, y=6},
--	[38799] = {x=1, y=5}, [38800] = {x=2, y=5}, [38801] = {x=3, y=5}, [38802] = {x=4, y=5}, [38803] = {x=5, y=5}, [38804] = {x=6, y=5}, [38805] = {x=7, y=5},
--	[38792] = {x=1, y=4}, [38793] = {x=2, y=4}, [38794] = {x=3, y=4}, [38795] = {x=4, y=4}, [38796] = {x=5, y=4}, [38797] = {x=6, y=4}, [38798] = {x=7, y=4},
--	[38785] = {x=1, y=3}, [38786] = {x=2, y=3}, [38787] = {x=3, y=3}, [38788] = {x=4, y=3}, [38789] = {x=5, y=3}, [38790] = {x=6, y=3}, [38791] = {x=7, y=3},
--	[38778] = {x=1, y=2}, [38779] = {x=2, y=2}, [38780] = {x=3, y=2}, [38781] = {x=4, y=2}, [38782] = {x=5, y=2}, [38783] = {x=6, y=2}, [38784] = {x=7, y=2},
--	[38771] = {x=1, y=1}, [38772] = {x=2, y=1}, [38773] = {x=3, y=1}, [38774] = {x=4, y=1}, [38775] = {x=5, y=1}, [38776] = {x=6, y=1}, [38777] = {x=7, y=1},
--}

-- Window variables
local z_order_plugin = "462b665ecb569efbf261422f"
local dragStart = nil	
local window = {}
local currRoom = {}

-- Drawing related variables
local colours = {
	bgGridButton = {A = "#333333", B = "#333333", C = "#333333", D = "#333333", E = "#333333", F = "#333333", G = "#333333"},
	bgGridButtonHighlight = "#8a8a8a",
	bgButton = "#333333",
	mazeColour = "#ff35a0",
	bgButtonHighlight = "#8a8a8a",
	selectedCommand = "green",
	selectedCommandHighlight = "palegreen",
	selectedCommandText = "lime",
	header = "#474747",
}
local headerSize = 20
local sizeHeight = 30
local sizeWidth = 30
local gridWidth = 0 --This will update upon drawing, needed for hotspots.
local gridBottom = 0 --This will update upon drawing, needed for hotspots.
local showZeros = tonumber(GetVariable("showZeros")) or 1
local gagMap = tonumber(GetVariable("gagMap")) or 0
local recoveryMax = 10
local recoveryCur = 10

function OnPluginInstall()
	resetIFData()
	if (GetVariable("window") ~= nil) then	-- load saved variables if they exist
		luastmt = "obj = " .. GetVariable("window")
		assert (loadstring (luastmt or "")) ()		
		window = obj
	else
		SetWindowDefaults() -- load window defaults
	end					

	InitializeWindow()
end

function OnPluginBroadcast(msg, id, name, text)
	if id == "3e7dedbe37e44942dd46d264" then -- gmcphandler
		if (text == "room.info") then
			res, gmcparg = CallPlugin("3e7dedbe37e44942dd46d264","gmcpval","room.info.num")
			processMove(gmcparg)
      end -- if room.info
	end
end

function SetWindowDefaults()
	window = {
		id = "window_" .. GetPluginID(),
		top = 10,
		left = 10,
		width = 275,
		height = 225,
		show = true,
		font = "defaultFont",
		fontFamily = "Consolas",
		fontSize = 9,
		fontColor = "white",
		borderColor = "lightgray",
		backgroundColor = "black"
	}
end

function InitializeWindow()
	WindowCreate(window.id, window.left, window.top, window.width, window.height, miniwin.pos_center_all, miniwin.create_keep_hotspots, ColourNameToRGB(window.backgroundColor))
	WindowFont(window.id, window.font, window.fontFamily, window.fontSize, false, false, false, false, 1, 0)
	WindowPosition(window.id, window.left, window.top, miniwin.pos_stretch_to_view, miniwin.create_absolute_location)	

	if (window.show) then
		WindowShow(window.id, window.show)				
		if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			CallPlugin(z_order_plugin, "boostMe", window.id)
		end
		Draw(window)
	end	
	CreateHotSpots()
end

function CreateHotSpots()
	WindowDeleteAllHotspots(window.id)

	-- Drag window
	WindowAddHotspot(window.id, "DragArea", 15, 0, window.width-15, headerSize, "", "", "", "", "mouseup", "Drag to move", miniwin.cursor_both_arrow, 0)
	WindowDragHandler(window.id, "DragArea", "dragmove", "dragrelease", 0)	

	-- Resize window
	WindowAddHotspot(window.id, "Resize", window.width-13, window.height-13, window.width-2, window.height-2,"", "", "", "", "mouseup", "Drag to resize", miniwin.cursor_nw_se_arrow, 0)
	WindowDragHandler(window.id, "Resize", "resizemove", "resizerelease", 0) 

	-- Help button (?)
	WindowAddHotspot(window.id, "DisplayHelp", 0, 0, 15, 15, "", "", "", "", "buttonmouseup", "", miniwin.cursor_hand, 0)

	-- Close button (x)
	WindowAddHotspot(window.id, "CloseMiniwindow", window.width-15, 0, window.width, 15, "", "", "", "", "buttonmouseup", "", miniwin.cursor_hand, 0)
end

function ShowWindow()
	window.show = true
	WindowShow(window.id, true)
	if (IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
		CallPlugin(z_order_plugin, "boostMe", window.id)
	end
	Draw(window)
	CreateHotSpots()
	SaveWindow()	
end

	
function HideWindow()
	window.show = false
	WindowShow(window.id, false)
	Draw(window)
	SaveWindow()
end	

function ResetWindow()
	SetWindowDefaults()		
	SaveWindow()	
	InitializeWindow()				
	Draw(window)
end

function SaveWindow()
	SetVariable("window", serialize.save_simple(window))
end	


function initializeMap(name, line, args)
	EnableTrigger ("map_line", true)
	EnableTrigger ("map_end", true)
	count = 6
end

function Draw(win)
	-- miniwin background
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, win.width, win.height, ColourNameToRGB(window.backgroundColor))	
	
	-- resize bars
	WindowLine(win.id, win.width-3,  win.height-2, win.width-2, win.height-3, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-4,  win.height-2, win.width-2, win.height-4, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-6,  win.height-2, win.width-2, win.height-6, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-7,  win.height-2, win.width-2, win.height-7, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-9,  win.height-2, win.width-2, win.height-9, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-10, win.height-2, win.width-2, win.height-10, ColourNameToRGB(window.backgroundColor), 0, 1)
	WindowLine(win.id, win.width-12, win.height-2, win.width-2, win.height-12, ColourNameToRGB(window.borderColor), 0, 2)
	WindowLine(win.id, win.width-13, win.height-2, win.width-2, win.height-13, ColourNameToRGB(window.backgroundColor), 0, 1)
	
	-- Header
	WindowRectOp(win.id, miniwin.rect_fill , 0, 0, window.width, headerSize, ColourNameToRGB(colours.header))
	WindowText(win.id, win.font, "IF Rat Maze Helper", (window.width)/2-(WindowTextWidth(win.id, win.font, "IF Rate Maze Helper")/2), 3, 0, 0, ColourNameToRGB("white"), true)
	WindowText(win.id, win.font, "x", window.width-15, 3, 0, 0, ColourNameToRGB("white"), true)
	WindowText(win.id, win.font, "?", 5, 3, 0, 0, ColourNameToRGB("white"), true)

	--Window outline
	WindowRectOp(win.id, miniwin.rect_3d_rect , 0, 0, win.width, win.height, ColourNameToRGB(window.borderColor), ColourNameToRGB(window.borderColor))
	
	--Grid Layout
	for i = 0, 5, 1 do
		local lookupI = 6-i
		local mod = 50 + i * sizeHeight - headerSize
		
		colours.bgGridButton = {A = "#333333", B = "#333333", C = "#333333", D = "#333333", E = "#333333", F = "#333333", G = "#333333"}
		
		-- #a2c4c9 - blue
		-- #00a86b - green
		-- #cc0000 - red
		
		if not(currRoom.x == nil or currRoom.y == nil) then
			if currRoom.y == lookupI then 
				if currRoom.x == 1 then colours.bgGridButton.A = "#a2c4c9"
				elseif currRoom.x == 2 then colours.bgGridButton.B = "#a2c4c9"
				elseif currRoom.x == 3 then colours.bgGridButton.C = "#a2c4c9"
				elseif currRoom.x == 4 then colours.bgGridButton.D = "#a2c4c9"
				elseif currRoom.x == 5 then colours.bgGridButton.E = "#a2c4c9"
				elseif currRoom.x == 6 then colours.bgGridButton.F = "#a2c4c9"
				elseif currRoom.x == 7 then colours.bgGridButton.G = "#a2c4c9"
				end
			end
		end
			
		
		if not(currRoom.y == lookupI and currRoom.x == 1) then setColour(ratMaze[lookupI].A, 1) end
		WindowRectOp(win.id, miniwin.rect_fill,    20, mod+1, 20+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButton.A))
		WindowRectOp(win.id, miniwin.rect_3d_rect, 20, mod+1, 20+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButtonHighlight), ColourNameToRGB(colours.bgGridButton.A))
		WindowText(win.id, win.font, lookupI, 5, mod+(sizeHeight*0.3), 0, 0, ColourNameToRGB(window.fontColor), true)
		WindowText(win.id, win.font, ratMaze[lookupI].A, 31, mod+7, 0, 0, ColourNameToRGB(colours.mazeColour), true)
		
		local bWidth = sizeWidth + 10 + 15
		if not(currRoom.y == lookupI and currRoom.x == 2) then setColour(ratMaze[lookupI].B, 2) end
		WindowRectOp(win.id, miniwin.rect_fill,    bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButton.B))
		WindowRectOp(win.id, miniwin.rect_3d_rect, bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButtonHighlight), ColourNameToRGB(colours.bgGridButton.B))
		WindowText(win.id, win.font, ratMaze[lookupI].B, bWidth+11, mod+7, 0, 0, ColourNameToRGB(colours.mazeColour), true)
	
		if not(currRoom.y == lookupI and currRoom.x == 3) then setColour(ratMaze[lookupI].C, 3) end
		bWidth = (sizeWidth*2) + 15 + 15
		WindowRectOp(win.id, miniwin.rect_fill,    bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButton.C))
		WindowRectOp(win.id, miniwin.rect_3d_rect, bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButtonHighlight), ColourNameToRGB(colours.bgGridButton.C))
		WindowText(win.id, win.font, ratMaze[lookupI].C, bWidth+11, mod+7, 0, 0, ColourNameToRGB(colours.mazeColour), true)
		
		if not(currRoom.y == lookupI and currRoom.x == 4) then setColour(ratMaze[lookupI].D, 4) end
		bWidth = (sizeWidth*3) + 20 + 15
		WindowRectOp(win.id, miniwin.rect_fill,    bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButton.D))
		WindowRectOp(win.id, miniwin.rect_3d_rect, bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButtonHighlight), ColourNameToRGB(colours.bgGridButton.D))
		WindowText(win.id, win.font, ratMaze[lookupI].D, bWidth+11, mod+7, 0, 0, ColourNameToRGB(colours.mazeColour), true)
		
		if not(currRoom.y == lookupI and currRoom.x == 5) then setColour(ratMaze[lookupI].E, 5) end
		bWidth = (sizeWidth*4) + 25 + 15
		WindowRectOp(win.id, miniwin.rect_fill,    bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButton.E))
		WindowRectOp(win.id, miniwin.rect_3d_rect, bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButtonHighlight), ColourNameToRGB(colours.bgGridButton.E))
		WindowText(win.id, win.font, ratMaze[lookupI].E, bWidth+11, mod+7, 0, 0, ColourNameToRGB(colours.mazeColour), true)
		
		if not(currRoom.y == lookupI and currRoom.x == 6) then setColour(ratMaze[lookupI].F, 6) end
		bWidth = (sizeWidth*5) + 30 + 15
		WindowRectOp(win.id, miniwin.rect_fill,    bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButton.F))
		WindowRectOp(win.id, miniwin.rect_3d_rect, bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButtonHighlight), ColourNameToRGB(colours.bgGridButton.F))
		WindowText(win.id, win.font, ratMaze[lookupI].F, bWidth+11, mod+7, 0, 0, ColourNameToRGB(colours.mazeColour), true)
		
		if not(currRoom.y == lookupI and currRoom.x == 7) then setColour(ratMaze[lookupI].G, 7) end
		bWidth = (sizeWidth*6) + 35 + 15
		WindowRectOp(win.id, miniwin.rect_fill,    bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButton.G))
		WindowRectOp(win.id, miniwin.rect_3d_rect, bWidth, mod+1, bWidth+sizeWidth, mod+sizeHeight-1, ColourNameToRGB(colours.bgGridButtonHighlight), ColourNameToRGB(colours.bgGridButton.G))
		WindowText(win.id, win.font, ratMaze[lookupI].G, bWidth+11, mod+7, 0, 0, ColourNameToRGB(colours.mazeColour), true)

		gridWidth = bWidth+sizeWidth
		if gridBottom <= mod+sizeHeight then
			gridBottom = mod+sizeHeight
		end
	end
end	

-- Handlers
function dragmove(flags, hotspot_id)							
	if (not dragStart) then
		dragStart = {
			x = WindowInfo(window.id, 14),
			y = WindowInfo(window.id, 15),
		}
	end		
	
	WindowPosition(window.id, 
					WindowInfo(window.id, 17) - dragStart.x, 
					WindowInfo(window.id, 18) - dragStart.y, 
					miniwin.pos_stretch_to_view, 
					miniwin.create_absolute_location)
end

function dragrelease(flags, hotspot_id)		
	window.left = WindowInfo(window.id, 10)
	window.top = WindowInfo(window.id, 11)
	
	dragStart = nil
	
	SaveWindow()
end

function resizemove(flags, hotspot_id) 
	window.width = WindowInfo(window.id, 17) - WindowInfo(window.id, 10)
	window.height = WindowInfo(window.id, 18) - WindowInfo(window.id, 11)
	
	WindowResize(window.id, window.width, window.height, ColourNameToRGB("gray"))
	WindowShow(window.id, true)
end

function resizerelease(flags, hotspot_id)
	SaveWindow()
	Draw(window)
	CreateHotSpots()
end

function mouseup(flags, hotspot_id)	
	if (bit.band(flags, miniwin.hotspot_got_rh_mouse) ~= 0) then
		local result = WindowMenu(window.id, 
			WindowInfo(window.id, 14),
			WindowInfo(window.id, 15),
			"Toggle Numbers|Gag Map Output|-|Bring to front|Send to back")		
		
		if (result ~= "" and IsPluginInstalled(z_order_plugin) and GetPluginInfo(z_order_plugin, 17)) then
			if result == "Toggle Numbers" then
				ToggleNumbers()
			elseif result == "Gag Map Output" then
				GagOutput()
			elseif (result == "Send to back") then 
				CallPlugin(z_order_plugin, "dropMe", window.id)
			else
				CallPlugin(z_order_plugin, "boostMe", window.id)
			end
		end
	end
end

function buttonmouseup(flags, hotspot_id)
	if hotspot_id == "DisplayHelp" then
		ShowHelp()
	elseif hotspot_id == "CloseMiniwindow" then
		HideWindow()
	end
end

function ShowHelp()
	ColourNote("orange", "black", GetPluginInfo (GetPluginID (), 3))
end


-- DATA Stuff
function resetIFData()
	ratMaze = {}
	for i = 1, 6, 1 do
		ratMaze[i] = { A = 0, B = 0, C = 0, D = 0, E = 0, F = 0, G = 0 }
	end
end

function loadMap(name, line, args) 
	nextLine = ltrim(line)
	if nextLine == '|                           |' then
		-- Ignore this line!
	else
		rmNextLine = string.gsub(nextLine, " ", "")
		rmNextLine = string.gsub(rmNextLine, "|", "")
		if not(nextLine==7) then
			ratMaze[count].A = getCharacter(nextLine,3)
			ratMaze[count].B = getCharacter(nextLine,7)
			ratMaze[count].C = getCharacter(nextLine,11)
			ratMaze[count].D = getCharacter(nextLine,15)
			ratMaze[count].E = getCharacter(nextLine,19)
			ratMaze[count].F = getCharacter(nextLine,23)
			ratMaze[count].G = getCharacter(nextLine,27)
		else		
			ratMaze[count].A = getCharacter(rmNextLine,1)
			ratMaze[count].B = getCharacter(rmNextLine,2)
			ratMaze[count].C = getCharacter(rmNextLine,3)
			ratMaze[count].D = getCharacter(rmNextLine,4)
			ratMaze[count].E = getCharacter(rmNextLine,5)
			ratMaze[count].F = getCharacter(rmNextLine,6)
			ratMaze[count].G = getCharacter(rmNextLine,7)
		end
			
		count = count - 1
	end
end

function printMap(name, line, args)
	-- Disable the triggers
	EnableTrigger ("map_line", false)
	EnableTrigger ("map_end", false)

	Draw(window)
	
end

function disableShit(name, line, args)
	-- Disable the triggers
	EnableTrigger ("map_line", false)
	EnableTrigger ("map_end", false)
end

function getCharacter(str,n) -- return a substring
  return string.sub(str,n,n) or nil
end

function getCurRoom(id)
    local idToCoords = {
        --[11435] = {x=1, y=6}, [11436] = {x=2, y=6}, [11437] = {x=3, y=6}, [11438] = {x=4, y=6}, [11439] = {x=5, y=6}, [11440] = {x=6, y=6}, [11441] = {x=7, y=6},
        --[11495] = {x=1, y=5}, [11496] = {x=2, y=5}, [11497] = {x=3, y=5}, [11498] = {x=4, y=5}, [11499] = {x=5, y=5}, [11500] = {x=6, y=5}, [11501] = {x=7, y=5},
        --[11555] = {x=1, y=4}, [11556] = {x=2, y=4}, [11557] = {x=3, y=4}, [11558] = {x=4, y=4}, [11559] = {x=5, y=4}, [11560] = {x=6, y=4}, [11561] = {x=7, y=4},
        --[11615] = {x=1, y=3}, [11616] = {x=2, y=3}, [11617] = {x=3, y=3}, [11618] = {x=4, y=3}, [11619] = {x=5, y=3}, [11620] = {x=6, y=3}, [11621] = {x=7, y=3},
        --[11675] = {x=1, y=2}, [11676] = {x=2, y=2}, [11677] = {x=3, y=2}, [11678] = {x=4, y=2}, [11679] = {x=5, y=2}, [11680] = {x=6, y=2}, [11681] = {x=7, y=2},
        --[11735] = {x=1, y=1}, [11736] = {x=2, y=1}, [11737] = {x=3, y=1}, [11738] = {x=4, y=1}, [11739] = {x=5, y=1}, [11740] = {x=6, y=1}, [11741] = {x=7, y=1},
		--
		[38806] = {x=1, y=6}, [38807] = {x=2, y=6}, [38808] = {x=3, y=6}, [38809] = {x=4, y=6}, [38810] = {x=5, y=6}, [38811] = {x=6, y=6}, [38812] = {x=7, y=6},
		[38799] = {x=1, y=5}, [38800] = {x=2, y=5}, [38801] = {x=3, y=5}, [38802] = {x=4, y=5}, [38803] = {x=5, y=5}, [38804] = {x=6, y=5}, [38805] = {x=7, y=5},
		[38792] = {x=1, y=4}, [38793] = {x=2, y=4}, [38794] = {x=3, y=4}, [38795] = {x=4, y=4}, [38796] = {x=5, y=4}, [38797] = {x=6, y=4}, [38798] = {x=7, y=4},
		[38785] = {x=1, y=3}, [38786] = {x=2, y=3}, [38787] = {x=3, y=3}, [38788] = {x=4, y=3}, [38789] = {x=5, y=3}, [38790] = {x=6, y=3}, [38791] = {x=7, y=3},
		[38778] = {x=1, y=2}, [38779] = {x=2, y=2}, [38780] = {x=3, y=2}, [38781] = {x=4, y=2}, [38782] = {x=5, y=2}, [38783] = {x=6, y=2}, [38784] = {x=7, y=2},
		[38771] = {x=1, y=1}, [38772] = {x=2, y=1}, [38773] = {x=3, y=1}, [38774] = {x=4, y=1}, [38775] = {x=5, y=1}, [38776] = {x=6, y=1}, [38777] = {x=7, y=1},
    }
    return idToCoords[tonumber(id)] or {x=0, y=0}
end

function processMove(id)
	currRoom = getCurRoom(id)
	Draw(window)
end

function setColour(room, numbah)
	-- #00a86b - green
	-- #cc0000 - red
	-- #333333 - gray
	if room == "$" then colour = "#cc0000"
--	elseif room == "x" then colour = "#cc0000"
	elseif room == "o" then colour = "#00a86b"
	else colour = "#333333"
	end
	
	if numbah == 1 then colours.bgGridButton.A  = colour
	elseif numbah == 2 then colours.bgGridButton.B = colour
	elseif numbah == 3 then colours.bgGridButton.C = colour
	elseif numbah == 4 then colours.bgGridButton.D = colour
	elseif numbah == 5 then colours.bgGridButton.E = colour
	elseif numbah == 6 then colours.bgGridButton.F = colour
	elseif numbah == 7 then colours.bgGridButton.G = colour
	end
end

-- Remove leading whitespace
function ltrim(s)
  return (s:gsub("^%s*", ""))
end

]]>

</script>

</muclient>


